#!/usr/bin/env python3

import argparse
import os
import os.path
import re
import string
import sys

TEMPLATE_ASM_START = r"""/* Generated by bin2s.py - do not edit */
.section    .rodata.{symbol}
.balign     {align}
.global     {symbol}
.type       {symbol} STT_OBJECT
{symbol}:
"""

TEMPLATE_ASM_LINE = "    .byte   {}\n"

TEMPLATE_ASM_COMPAT = r"""
.global     {symbol}_end
{symbol}_end:
"""

TEMPLATE_ASM_END = r""".size       {symbol}, .-{symbol}
.previous
"""

TEMPLATE_C = r"""/* Generated by bin2s.py - do not edit */
#pragma once
#include <stdint.h>

extern const uint8_t {symbol}[{size}];
"""

TEMPLATE_C_COMPAT = r"""/* Generated by bin2s.py - do not edit */
#pragma once
#include <stddef.h>
#include <stdint.h>

extern const uint8_t {symbol}[];
extern const uint8_t {symbol}_end[];

#if __cplusplus >= 201103L
static constexpr size_t {symbol}_size = {size};
#else
static const size_t {symbol}_size = {size};
#endif
"""

def underscorify(s):
    if not s:
        return s

    if s[0] in string.digits:
        s = "_" + s

    return re.sub("[^a-zA-Z0-9_]", "_", s)

def filesize(f):
    old = f.tell()
    f.seek(0, os.SEEK_END)
    size = f.tell()
    f.seek(old)
    return size

def dump_template(symbol, align, size, inf, out, header):
    out.write(TEMPLATE_ASM_START.format(symbol=symbol, align=align))

    # TODO: Look man, I don't know
    l = inf.read()
    chunks = [l[i:i + 8] for i in range(0, len(l), 8)]

    for chunk in chunks:
        f = ("0x{:02X}, " * (len(chunk) - 1)) + "0x{:02X}"
        bytez = f.format(*chunk)
        out.write(TEMPLATE_ASM_LINE.format(bytez))

    out.write(TEMPLATE_ASM_END.format(symbol=symbol))

    if header:
        header.write(TEMPLATE_C.format(symbol=symbol, size=size))

def main():
    p = argparse.ArgumentParser()

    p.add_argument("file", type=argparse.FileType("rb"))
    p.add_argument("-c", "--compatible", action="store_true")
    p.add_argument("-o", "--output", type=argparse.FileType("w+"), default=sys.stdout)
    p.add_argument("-a", "--align", type=int, nargs=1, default=4)
    p.add_argument("-H", "--header", type=argparse.FileType("w+"))

    opts = p.parse_args()

    f = opts.file
    symbol = underscorify(os.path.basename(f.name))

    size = filesize(f)

    align = opts.align

    dump_template(symbol, align, size, f, opts.output, opts.header)


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(e, file=sys.stderr)
        exit(1)
